service: todo-serverless
frameworkVersion: '3'

plugins:
  - serverless-plugin-typescript
  - serverless-offline-sns
  - serverless-offline-sqs
  - serverless-offline

custom:
  stage: ${opt:stage, "dev"}
  secrets: ${file(secrets.json)}
  serverless-offline:
    httpPort: 4000
  serverless-offline-sns:
    port: 4002 # a free port for the sns server to run on
    debug: false
    accountId: ${self:custom.secrets.SNS_ACCOUNT}
  serverless-offline-sqs:
    autoCreate: true # Create queue if not exists
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324 # This is the enpoint of our ElasticMQ container
    region: ap-southeast-1
    skipCacheInvalidation: false

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-southeast-1
  deploymentBucket:
    name: todo-serverless-aws-lambda.${self:provider.region}.deploys.${self:custom.stage}
    maxPreviousDeploymentArtifacts: 5
    blockPublicAccess: true
  environment:
    APP_ENV: ${self:custom.secrets.APP_ENV}
    SNS_REGION: ${self:custom.secrets.SNS_REGION}
    SNS_KEY: ${self:custom.secrets.SNS_KEY}
    SNS_SECRET: ${self:custom.secrets.SNS_SECRET}
    SNS_ACCOUNT: ${self:custom.secrets.SNS_ACCOUNT}
    STAGE: ${self:custom.stage}

functions:
  hello:
    handler: handlers.hello
    events:
      - httpApi:
          path: '/hello'
          method: get

  getTodo:
    handler: handlers.getTodo
    events:
      - httpApi:
          path: '/todo'
          method: get
  
  dispatch:
    handler: handlers.dispatch
    events:
      - httpApi:
          path: dispatch
          method: get

  handleMyQueue:
    handler: handlers.handleMyQueue
    events:
      - sqs:
          arn: arn:aws:sqs:${self:custom.secrets.SNS_REGION}:${self:custom.secrets.SNS_ACCOUNT}:${self:custom.stage}-MyQueue

  consume:
    handler: handlers.consume
    description: Consume MyTopic  - Subscriber
    events:
      - sns: ${self:custom.stage}-MyTopic

